package components

import (
	"github.com/docker/docker/api/types"
	"strconv"
	"fmt"
	"time"
)

templ ShowContainer(container types.Container) {
	<tr>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<p class="whitespace-no-wrap">{ container.ID[:10] }</p>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<p class="whitespace-no-wrap">{ container.Image }</p>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<p class="whitespace-no-wrap">{ container.Names[0] }</p>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<p class="whitespace-no-wrap">
				for i := 0; i<len(container.Ports); i++ {
					{ strconv.FormatUint(uint64(container.Ports[i].PrivatePort),10) } { "->" } { strconv.FormatUint(uint64(container.Ports[i].PublicPort),10)+"; " }
				}
			</p>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<span class={ "rounded-full bg-green-200 px-3 py-1 text-xs font-semibold text-green-900", templ.KV("bg-red-300", container.State == "exited") }>{ container.State }</span>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<p class="whitespace-no-wrap">{ time.Unix(container.Created, 0).Format("02 Jan 06 15:04") }</p>
		</td>
		<td class="border-b border-gray-200 bg-white px-5 py-5 text-sm">
			<a class="cursor-pointer" hx-get={ "/containers/edit/" + container.ID } hx-swap="innerHTML" hx-target="#content"><i class="fa-solid fa-pen-to-square"></i></a>
			<a class="cursor-pointer" hx-get={ "/containers/stop/" + container.ID } hx-swap="innerHTML" hx-target="#content"><i class="fa-solid fa-stop"></i></a>
			<a class="cursor-pointer" hx-get={ "/containers/remove/" + container.ID } hx-swap="innerHTML" hx-target="#content"><i class="fa-solid fa-xmark"></i></a>
		</td>
	</tr>
}

templ ShowContainerPage(container types.ContainerJSON) {
	{ container.State.Status }
}

templ ContainersPage (containers []types.Container, userRole string) {
	@Containers(userRole) {
		<div class="py-8 px-8">
			<div class="flex items-center justify-between pb-6">
				<div>
					<h2 class="font-semibold text-gray-700">Containers</h2>
					<span class="text-xs text-gray-500">View containers</span>
				</div>
				<button
					class="rounded-md bg-gray-900 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
					hx-get="/containers/create"
					hx-swap="innerHTML"
					hx-target="#content"
				>
					+
				</button>
			</div>
			<div class="w-full overflow-y-hidden rounded-lg">
				<div class="overflow-x-auto">
					<table class="table-auto w-full">
						<thead>
							<tr class="bg-gray-900 text-left text-xs font-semibold uppercase tracking-widest text-white">
								<th class="px-5 py-3">ID</th>
								<th class="px-5 py-3">Image</th>
								<th class="px-5 py-3">Name</th>
								<th class="px-5 py-3">Ports</th>
								<th class="px-5 py-3">State</th>
								<th class="px-5 py-3">Created at</th>
								<th class="px-5 py-3">Controls</th>
							</tr>
						</thead>
						<tbody class="text-gray-500">
							for _, container := range containers {
								@ShowContainer(container)
							}
						</tbody>
					</table>
				</div>
				<div class="flex flex-col items-center border-t bg-white px-5 py-5 sm:flex-row sm:justify-between">
					<span class="text-xs text-gray-600 sm:text-sm">Showing 1 to 10 of { fmt.Sprint(len(containers)) } Entries </span>
					<div class="mt-2 inline-flex sm:mt-0">
						<button class="mr-2 h-12 w-12 rounded-full border text-sm font-semibold text-gray-600 transition duration-150 hover:bg-gray-100">Prev</button>
						<button class="h-12 w-12 rounded-full border text-sm font-semibold text-gray-600 transition duration-150 hover:bg-gray-100">Next</button>
					</div>
				</div>
			</div>
		</div>
	}
}

templ ShowCreateForm() {
	<div class="mx-5 bg-gray-900 p-8 rounded-lg shadow">
		<h2 class="text-2xl font-semibold text-gray-100 mb-6">Create container</h2>
		<form hx-post="/containers/create" hx-target="#content" hx-swap="innerHTML" class="flex flex-col">
			<div class="flex">
				<!-- Name -->
				<div class="mb-4 md:mr-5 flex-1">
					<label for="name" class="block text-sm font-medium text-gray-100">Name</label>
					<input type="text" id="name" name="name" class="mt-1 p-2 w-full border rounded-md"/>
				</div>
				<!-- Image -->
				<div class="mb-4 flex-1">
					<label for="image" class="block text-sm font-medium text-gray-100">Image</label>
					<input type="text" id="image" name="image" class="mt-1 p-2 w-full border rounded-md"/>
				</div>
			</div>
			<!-- Environment Variables -->
			<div class="mb-4">
				<label for="env" class="block text-sm font-medium text-gray-100">Environment Variables</label>
				<textarea type="text" id="env" name="env" class="mt-1 p-2 w-full border rounded-md"></textarea>
			</div>
			<!-- Command -->
			<div class="mb-4">
				<label for="cmd" class="block text-sm font-medium text-gray-100">Command</label>
				<input type="text" id="cmd" name="cmd" class="mt-1 p-2 w-full border rounded-md"/>
			</div>
			<!-- Image -->
			<div class="mb-4">
				<label for="exposedPorts" class="block text-sm font-medium text-gray-100">Exposed Ports</label>
				<input type="text" id="exposedPorts" name="exposedPorts" class="mt-1 p-2 w-full border rounded-md"/>
			</div>
			<!-- Volumes -->
			<div class="mb-4">
				<label for="volumes" class="block text-sm font-medium text-gray-100">Volumes</label>
				<input type="text" id="volumes" name="volumes" class="mt-1 p-2 w-full border rounded-md"/>
			</div>
			<!-- Entrypoint -->
			<div class="mb-4">
				<label for="entrypoint" class="block text-sm font-medium text-gray-100">Entrypoint</label>
				<input type="text" id="entrypoint" name="entrypoint" class="mt-1 p-2 w-full border rounded-md"/>
			</div>
			<!-- Network Disabled -->
			<div class="mb-4">
				<label for="networkDisabled" class="block text-sm font-medium text-gray-100">Network Disabled</label>
				<input type="checkbox" id="networkDisabled" name="networkDisabled" class="mt-1"/>
			</div>
			<!-- Labels -->
			<div class="mb-6">
				<label for="labels" class="block text-sm font-medium text-gray-100">Labels</label>
				<textarea id="labels" name="labels" rows="4" class="mt-1 p-2 w-full border rounded-md"></textarea>
			</div>
			<!-- Submit Button -->
			<div>
				<button type="submit" class="w-full bg-blue-500 text-white p-3 rounded-md">Create Docker Container</button>
			</div>
		</form>
	</div>
}

templ ContainersPageFull(cont []types.Container, userRole string) {
	@Base(userRole) {
		@ContainersPage(cont, userRole)
	}
}
